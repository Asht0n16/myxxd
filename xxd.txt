00000000: 2369 6e63 6c75 6465 203c 7374 6469 6f2e  #include <stdio.
00000010: 683e 0a23 696e 636c 7564 6520 3c73 7464  h>.#include <std
00000020: 6c69 622e 683e 0a23 696e 636c 7564 6520  lib.h>.#include 
00000030: 3c73 7472 696e 672e 683e 0a0a 2364 6566  <string.h>..#def
00000040: 696e 6520 5452 5545 2031 0a23 6465 6669  ine TRUE 1.#defi
00000050: 6e65 2046 414c 5345 2030 0a23 6465 6669  ne FALSE 0.#defi
00000060: 6e65 2042 4144 5f4e 554d 4245 525f 4152  ne BAD_NUMBER_AR
00000070: 4753 2031 0a0a 2f2a 2a0a 202a 2a20 5061  GS 1../**. ** Pa
00000080: 7273 6573 2074 6865 2063 6f6d 6d61 6e64  rses the command
00000090: 206c 696e 652e 0a20 2a2a 0a20 2a2a 2061   line.. **. ** a
000000a0: 7267 633a 2074 6865 206e 756d 6265 7220  rgc: the number 
000000b0: 6f66 2069 7465 6d73 206f 6e20 7468 6520  of items on the 
000000c0: 636f 6d6d 616e 6420 6c69 6e65 2028 616e  command line (an
000000d0: 6420 6c65 6e67 7468 206f 6620 7468 650a  d length of the.
000000e0: 202a 2a09 2061 7267 7620 6172 7261 7929   **. argv array)
000000f0: 2069 6e63 6c75 6469 6e67 2074 6865 2065   including the e
00000100: 7865 6375 7461 626c 650a 202a 2a20 6172  xecutable. ** ar
00000110: 6776 3a20 7468 6520 6172 7261 7920 6f66  gv: the array of
00000120: 2061 7267 756d 656e 7473 2061 7320 7374   arguments as st
00000130: 7269 6e67 7320 2863 6861 722a 2061 7272  rings (char* arr
00000140: 6179 290a 202a 2a20 6269 7473 3a20 7468  ay). ** bits: th
00000150: 6520 696e 7465 6765 7220 7661 6c75 6520  e integer value 
00000160: 6973 2073 6574 2074 6f20 5452 5545 2069  is set to TRUE i
00000170: 6620 6269 7473 206f 7574 7075 7420 696e  f bits output in
00000180: 6469 6361 7465 640a 202a 2a20 2020 2020  dicated. **     
00000190: 206f 7574 6865 7277 6973 6520 4641 4c53   outherwise FALS
000001a0: 4520 666f 7220 6865 7820 6f75 7470 7574  E for hex output
000001b0: 0a20 2a2a 0a20 2a2a 2072 6574 7572 6e73  . **. ** returns
000001c0: 2074 6865 2069 6e70 7574 2066 696c 6520   the input file 
000001d0: 706f 696e 7465 7220 2846 494c 452a 290a  pointer (FILE*).
000001e0: 202a 2a2a 2f0a 4649 4c45 202a 7061 7273   ***/.FILE *pars
000001f0: 6543 6f6d 6d61 6e64 4c69 6e65 2869 6e74  eCommandLine(int
00000200: 2061 7267 632c 2063 6861 7220 2a2a 6172   argc, char **ar
00000210: 6776 2c20 696e 7420 2a62 6974 7329 207b  gv, int *bits) {
00000220: 0a20 2069 6620 2861 7267 6320 3e20 3229  .  if (argc > 2)
00000230: 207b 0a20 2020 2020 2070 7269 6e74 6628   {.      printf(
00000240: 2255 7361 6765 3a20 2573 205b 2d62 7c2d  "Usage: %s [-b|-
00000250: 6269 7473 5d5c 6e22 2c20 6172 6776 5b30  bits]\n", argv[0
00000260: 5d29 3b0a 2020 2020 2020 6578 6974 2842  ]);.      exit(B
00000270: 4144 5f4e 554d 4245 525f 4152 4753 293b  AD_NUMBER_ARGS);
00000280: 0a20 207d 0a0a 2020 6966 2028 6172 6763  .  }..  if (argc
00000290: 203d 3d20 3220 2626 0a20 2020 2020 2028   == 2 &&.      (
000002a0: 7374 7263 6d70 2861 7267 765b 315d 2c20  strcmp(argv[1], 
000002b0: 222d 6222 2920 3d3d 2030 207c 7c20 7374  "-b") == 0 || st
000002c0: 7263 6d70 2861 7267 765b 315d 2c20 222d  rcmp(argv[1], "-
000002d0: 6269 7473 2229 203d 3d20 3029 2920 7b0a  bits") == 0)) {.
000002e0: 2020 2020 2a62 6974 7320 3d20 5452 5545      *bits = TRUE
000002f0: 3b0a 2020 7d20 656c 7365 207b 0a20 2020  ;.  } else {.   
00000300: 202a 6269 7473 203d 2046 414c 5345 3b0a   *bits = FALSE;.
00000310: 2020 7d0a 0a20 2072 6574 7572 6e20 7374    }..  return st
00000320: 6469 6e3b 0a7d 0a0a 2f2a 2a0a 202a 2020  din;.}../**. *  
00000330: 2a20 5772 6974 6573 2064 6174 6120 746f  * Writes data to
00000340: 2073 7464 6f75 7420 696e 2068 6578 6164   stdout in hexad
00000350: 6563 696d 616c 2e0a 202a 2020 202a 0a20  ecimal.. *   *. 
00000360: 2a20 2020 202a 2053 6565 206d 7978 7864  *    * See myxxd
00000370: 2e6d 6420 666f 7220 6465 7461 696c 732e  .md for details.
00000380: 0a20 2a20 2020 2020 2a0a 202a 2020 2020  . *     *. *    
00000390: 2020 2a20 6461 7461 3a20 616e 2061 7272    * data: an arr
000003a0: 6179 206f 6620 6e6f 206d 6f72 6520 7468  ay of no more th
000003b0: 616e 2031 3620 6368 6172 6163 7465 7273  an 16 characters
000003c0: 0a20 2a20 2020 2020 2020 2a20 7369 7a65  . *       * size
000003d0: 3a20 7468 6520 7369 7a65 206f 6620 7468  : the size of th
000003e0: 6520 6172 7261 790a 202a 2020 2020 2020  e array. *      
000003f0: 2020 2a2a 2f0a 766f 6964 2070 7269 6e74    **/.void print
00000400: 4461 7461 4173 4865 7828 756e 7369 676e  DataAsHex(unsign
00000410: 6564 2063 6861 7220 2a64 6174 612c 2073  ed char *data, s
00000420: 697a 655f 7420 7369 7a65 2920 7b0a 2020  ize_t size) {.  
00000430: 2f2f 7072 696e 7466 2822 544f 444f 2031  //printf("TODO 1
00000440: 3a20 7072 696e 7444 6174 6141 7348 6578  : printDataAsHex
00000450: 2028 3229 2229 3b0a 2020 666f 7220 2873   (2)");.  for (s
00000460: 697a 655f 7420 693d 303b 2069 3c73 697a  ize_t i=0; i<siz
00000470: 653b 2069 202b 3d20 3229 207b 0a20 2020  e; i += 2) {.   
00000480: 2070 7269 6e74 6628 2225 3032 7825 3032   printf("%02x%02
00000490: 7820 222c 2064 6174 615b 695d 2c20 6461  x ", data[i], da
000004a0: 7461 5b69 2b31 5d29 3b0a 2020 7d0a 7d0a  ta[i+1]);.  }.}.
000004b0: 0a2f 2a2a 0a20 2a20 202a 2057 7269 7465  ./**. *  * Write
000004c0: 7320 6461 7461 2074 6f20 7374 646f 7574  s data to stdout
000004d0: 2061 7320 6368 6172 6163 7465 7273 2e0a   as characters..
000004e0: 202a 2020 202a 0a20 2a20 2020 202a 2053   *   *. *    * S
000004f0: 6565 206d 7978 7864 2e6d 6420 666f 7220  ee myxxd.md for 
00000500: 6465 7461 696c 732e 0a20 2a20 2020 2020  details.. *     
00000510: 2a0a 202a 2020 2020 2020 2a20 6461 7461  *. *      * data
00000520: 3a20 616e 2061 7272 6179 206f 6620 6e6f  : an array of no
00000530: 206d 6f72 6520 7468 616e 2031 3620 6368   more than 16 ch
00000540: 6172 6163 7465 7273 0a20 2a20 2020 2020  aracters. *     
00000550: 2020 2a20 7369 7a65 3a20 7468 6520 7369    * size: the si
00000560: 7a65 206f 6620 7468 6520 6172 7261 790a  ze of the array.
00000570: 202a 2020 2020 2020 2020 2a2a 2f0a 766f   *        **/.vo
00000580: 6964 2070 7269 6e74 4461 7461 4173 4368  id printDataAsCh
00000590: 6172 7328 756e 7369 676e 6564 2063 6861  ars(unsigned cha
000005a0: 7220 2a64 6174 612c 2073 697a 655f 7420  r *data, size_t 
000005b0: 7369 7a65 2920 7b0a 2020 7072 696e 7466  size) {.  printf
000005c0: 2822 544f 444f 2032 3a20 7072 696e 7444  ("TODO 2: printD
000005d0: 6174 6141 7343 6861 7273 2028 3329 2229  ataAsChars (3)")
000005e0: 3b0a 7d0a 0a76 6f69 6420 7265 6164 416e  ;.}..void readAn
000005f0: 6450 7269 6e74 496e 7075 7441 7348 6578  dPrintInputAsHex
00000600: 2846 494c 4520 2a69 6e70 7574 2920 7b0a  (FILE *input) {.
00000610: 2020 756e 7369 676e 6564 2063 6861 7220    unsigned char 
00000620: 6461 7461 5b31 365d 3b0a 2020 696e 7420  data[16];.  int 
00000630: 6e75 6d42 7974 6573 5265 6164 203d 2066  numBytesRead = f
00000640: 7265 6164 2864 6174 612c 2031 2c20 3136  read(data, 1, 16
00000650: 2c20 696e 7075 7429 3b0a 2020 756e 7369  , input);.  unsi
00000660: 676e 6564 2069 6e74 206f 6666 7365 7420  gned int offset 
00000670: 3d20 303b 0a20 2077 6869 6c65 2028 6e75  = 0;.  while (nu
00000680: 6d42 7974 6573 5265 6164 2021 3d20 3029  mBytesRead != 0)
00000690: 207b 0a20 2020 2020 7072 696e 7466 2822   {.     printf("
000006a0: 2530 3878 3a22 2c20 6f66 6673 6574 293b  %08x:", offset);
000006b0: 0a20 2020 2020 6f66 6673 6574 202b 3d20  .     offset += 
000006c0: 6e75 6d42 7974 6573 5265 6164 3b0a 0909  numBytesRead;...
000006d0: 2070 7269 6e74 4461 7461 4173 4865 7828   printDataAsHex(
000006e0: 6461 7461 2c20 6e75 6d42 7974 6573 5265  data, numBytesRe
000006f0: 6164 293b 0a09 0920 7072 696e 7466 2822  ad);... printf("
00000700: 2020 2229 3b0a 0909 2070 7269 6e74 4461    ");... printDa
00000710: 7461 4173 4368 6172 7328 6461 7461 2c20  taAsChars(data, 
00000720: 6e75 6d42 7974 6573 5265 6164 293b 0a09  numBytesRead);..
00000730: 0920 7072 696e 7466 2822 5c6e 2229 3b0a  . printf("\n");.
00000740: 0909 206e 756d 4279 7465 7352 6561 6420  .. numBytesRead 
00000750: 3d20 6672 6561 6428 6461 7461 2c20 312c  = fread(data, 1,
00000760: 2031 362c 2069 6e70 7574 293b 0a09 7d0a   16, input);..}.
00000770: 7d0a 0a2f 2a2a 0a20 2a20 202a 2042 6974  }../**. *  * Bit
00000780: 7320 6f75 7470 7574 2066 6f72 2078 7864  s output for xxd
00000790: 2e0a 202a 2020 202a 0a20 2a20 2020 202a  .. *   *. *    *
000007a0: 2053 6565 206d 7978 7864 2e6d 6420 666f   See myxxd.md fo
000007b0: 7220 6465 7461 696c 732e 0a20 2a20 2020  r details.. *   
000007c0: 2020 2a0a 202a 2020 2020 2020 2a20 696e    *. *      * in
000007d0: 7075 743a 2069 6e70 7574 2073 7472 6561  put: input strea
000007e0: 6d0a 202a 2020 2020 2020 202a 2a2f 0a76  m. *       **/.v
000007f0: 6f69 6420 7265 6164 416e 6450 7269 6e74  oid readAndPrint
00000800: 496e 7075 7441 7342 6974 7328 4649 4c45  InputAsBits(FILE
00000810: 202a 696e 7075 7429 207b 0a20 2070 7269   *input) {.  pri
00000820: 6e74 6628 2254 4f44 4f20 333a 2072 6561  ntf("TODO 3: rea
00000830: 6441 6e64 5072 696e 7449 6e70 7574 4173  dAndPrintInputAs
00000840: 4269 7473 5c6e 2229 3b0a 7d0a 0a69 6e74  Bits\n");.}..int
00000850: 206d 6169 6e28 696e 7420 6172 6763 2c20   main(int argc, 
00000860: 6368 6172 202a 2a61 7267 7629 207b 0a20  char **argv) {. 
00000870: 2069 6e74 2062 6974 7320 3d20 4641 4c53   int bits = FALS
00000880: 453b 0a20 2046 494c 4520 2a69 6e70 7574  E;.  FILE *input
00000890: 203d 2070 6172 7365 436f 6d6d 616e 644c   = parseCommandL
000008a0: 696e 6528 6172 6763 2c20 6172 6776 2c20  ine(argc, argv, 
000008b0: 2662 6974 7329 3b0a 0a09 6966 2028 6269  &bits);...if (bi
000008c0: 7473 203d 3d20 4641 4c53 4529 207b 0a09  ts == FALSE) {..
000008d0: 2020 2072 6561 6441 6e64 5072 696e 7449     readAndPrintI
000008e0: 6e70 7574 4173 4865 7828 696e 7075 7429  nputAsHex(input)
000008f0: 3b0a 097d 2065 6c73 6520 7b0a 0920 2020  ;..} else {..   
00000900: 7265 6164 416e 6450 7269 6e74 496e 7075  readAndPrintInpu
00000910: 7441 7342 6974 7328 696e 7075 7429 3b0a  tAsBits(input);.
00000920: 097d 0a09 2020 2072 6574 7572 6e20 303b  .}..   return 0;
00000930: 0a7d 0a                                  .}.
